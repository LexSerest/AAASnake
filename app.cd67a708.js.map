{"version":3,"sources":["game/helpers/helpers.ts","game/helpers/enum.ts","game/libs/keyboard.ts","game/vars.ts","game/libs/canvas.ts","game/libs/snakeFood.ts","game/foods/food.ts","game/foods/feces.ts","game/foods/clean.ts","game/foods/border_off.ts","game/foods/lessen.ts","game/foods/reset.ts","game/foods/score_1000.ts","game/foods/score_x2.ts","game/foods/size_add.ts","game/foods/size_reduce.ts","game/foods/speed_add.ts","game/foods/speed_reduce.ts","game/foods/splitfood.ts","game/foods/index.ts","game/libs/gui.ts","game/libs/player.ts","game/libs/snake.ts","game/main.ts","tg-integration.js","app.js"],"names":["baseurl","url","window","location","href","token","send","get_script","document","createElement","setAttribute","head","appendChild","onload","remove","split","length","history","replaceState","pathname","e","onEnd","score","Player","t","toString","require"],"mappings":"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","file":"app.cd67a708.js","sourceRoot":"..","sourcesContent":["const $ = document.querySelector.bind(document);\nconst $$ = document.querySelectorAll.bind(document);\n\n\ndeclare global {\n  interface ObjectConstructor {\n    copy(o: {}): any;\n  }\n\n  interface Array<T> {\n    clone(): Array<T>;\n    sample(count: number): Array<T>;\n  }\n}\n\n\nObject.copy = function (target) {\n  let obj = {};\n\n  Object.keys(target).forEach(key => {\n    let value = target[key];\n    if (typeof (value) == 'object' && !(value instanceof Array)) value = Object.copy(value);\n    if (value instanceof Array) value = value.slice(0);\n    obj[key] = value;\n  })\n\n  return obj;\n}\n\nArray.prototype.clone = function(){\n  return this.slice(0);\n}\n\nArray.prototype.sample = function(count = 1){\n  let arr = [];\n  while(count-- && this.length){\n    let index = Math.random() * this.length >> 0;\n    arr.push(this.splice(index, 1)[0])\n  }\n  return arr;\n}\n\nexport { $, $$ };","export enum Direction { Up, Right, Down, Left }\nexport enum Keys {\n  Up = 38,\n  Right = 37,\n  Left = 39,\n  Down = 40,\n  Space = 32,\n  Return = 13\n}","import { Keys } from '../helpers/enum';\n\n\nnamespace Keyboard {\n  export let swipeEnabled = true;\n\n  export function swipebind(element: HTMLElement, f: Function) {\n    let xDown = null;\n    let yDown = null;\n\n    // swipe\n    element.addEventListener('touchstart', evt => {\n      if (!swipeEnabled) return;\n      xDown = evt.touches[0].clientX;\n      yDown = evt.touches[0].clientY;\n    }, false);\n\n    element.addEventListener('touchmove', evt => {\n      if (!xDown || !yDown) return;\n\n      let xUp = evt.touches[0].clientX;\n      let yUp = evt.touches[0].clientY;\n      let xDiff = xDown - xUp;\n      let yDiff = yDown - yUp;\n\n      if (Math.abs(xDiff) > Math.abs(yDiff)) {\n        f(xDiff > 0 ? Keys.Right : Keys.Left)\n      } else {\n        f(yDiff > 0 ? Keys.Up : Keys.Down)\n      }\n\n      xDown = null;\n      yDown = null;\n    }, false);\n  }\n\n  export function doubletap(element: HTMLElement, f: Function) {\n    var lastTap = 0;\n\n    element.addEventListener('touchend', function (event) {\n      var currentTime = new Date().getTime();\n      var tapLength = currentTime - lastTap;\n      if (tapLength < 300 && tapLength > 0) {\n        event.preventDefault()\n        f(Keys.Space);\n      }\n      lastTap = currentTime;\n    });\n  }\n\n  export function setSwipe(status = true) {\n    swipeEnabled = status\n  }\n\n  export function init_keyboard(element: HTMLElement, f: Function) {\n    element.addEventListener('keydown', e => f(e.keyCode))\n    swipebind(element, e => f(e))\n  }\n\n  export function init_doubletap(element: HTMLElement, f: Function) {\n    doubletap(element, e => f(e))\n  }\n\n\n}\n\nexport default Keyboard;","export namespace DefaultVars {\n  export const blockSize = 15;\n  export const border = 3;\n  export const defaultSizeMap = 20;\n  export const color_border = '#343D46';\n  export const color_background = '#A7ADBA';\n  export const color_snake = '#4F5B66';\n  export const color_snake_head = '#47515a';\n  export const color_food = '#28b528';\n  export const colors_food = [\n    '#b52828', '#b5289d', '#5828b5', '#288eb5', '#28b594', '#b5b128',\n    '#ea9a9a', '#ea9ae4', '#337341', '#9aeaab', '#c4ea9a', '#ead59a',\n    '#FFFFFF', '#0e0086', '#860038'\n  ];\n}\n\nexport namespace Vars {\n  export let blockSize = DefaultVars.blockSize;\n  export let border = DefaultVars.border\n  export let defaultSizeMap = DefaultVars.defaultSizeMap;\n  export let color_border = DefaultVars.color_border;\n  export let color_background = DefaultVars.color_background;\n  export let color_snake = DefaultVars.color_snake;\n  export let color_snake_head = DefaultVars.color_snake_head;\n  export let color_food = DefaultVars.color_food;\n  export let colors_food = DefaultVars.colors_food.slice(0);\n\n  export function set_default() {\n    Object.keys(DefaultVars).forEach(e => Vars[e] = DefaultVars[e])\n    colors_food = DefaultVars.colors_food.slice(0);\n  }\n\n}\n","import { $ } from '../helpers/helpers';\nimport { Vars } from '../vars';\n\nnamespace Canvas {\n\n  export let canvas: HTMLCanvasElement;\n  export let context: CanvasRenderingContext2D;\n  export let pixelRatio = Math.round(window.devicePixelRatio);\n  \n  export function init(canvas_selector: string) {\n    canvas = $(canvas_selector);\n    canvas.width = (Vars.defaultSizeMap * Vars.blockSize + Vars.border * 2) * pixelRatio;\n    canvas.height = canvas.width;\n  \n    // device scale\n    canvas.style.width = (canvas.width / pixelRatio) + 'px';\n    canvas.style.height = (canvas.height / pixelRatio) + 'px';\n  \n    context = canvas.getContext(\"2d\");\n    context.imageSmoothingEnabled = false;\n    first();\n  }\n  \n  export function fill(color: string, x1 = 0, y1 = 0, x2 = canvas.width, y2 = canvas.height) {\n    context.beginPath();\n    context.fillStyle = color;\n    context.fillRect(x1, y1, x2, y2);\n    context.restore();\n  }\n  \n  export function first() {\n    fill(Vars.color_border);\n    fill(\n      Vars.color_background,\n      Vars.border * pixelRatio,\n      Vars.border * pixelRatio,\n      canvas.width - Vars.border * 2 * pixelRatio,\n      canvas.height - Vars.border * 2 * pixelRatio\n    )\n  }\n  \n  export function drawBox(x: number, y: number, color = \"#000\") {\n    context.beginPath();\n    context.fillStyle = color;\n    context.fillRect(\n      (Vars.border + x * Vars.blockSize) * pixelRatio,\n      (Vars.border + y * Vars.blockSize) * pixelRatio,\n      Vars.blockSize * pixelRatio,\n      Vars.blockSize * pixelRatio\n    );\n    context.restore();\n  }\n}\n\n\nexport default Canvas;","import { Vars, DefaultVars } from '../vars';\nimport Canvas from './canvas';\nimport Player from './player';\nimport Snake from './snake';\nimport GUI from './gui';\nimport Foods from '../foods/index';\n\n\nnamespace SnakeFood {\n\n  export let foods: Food[] = [];\n  export let foods_type: FoodTypes = {};\n  export let iteration = 0;\n  export let _iterationArr = [];\n\n  let foods_data = [];\n\n  export function init() {\n    foods = [];\n    foods_type = {};\n    iteration = 0;\n    _iterationArr = [];\n    foods_init();\n  }\n\n  export function rndColor() {\n    let i = Math.random() * Vars.colors_food.length >> 0;\n    return Vars.colors_food.splice(i, 1)[0];\n  }\n\n  export function rndColorReset() {\n    Vars.colors_food = DefaultVars.colors_food.slice(0)\n    return true;\n  }\n\n  export function draw() {\n    for (let i = 0; i < foods.length; i++) {\n      let e = foods[i];\n      Canvas.drawBox(e.x, e.y, get_color(e.name))\n    }\n  }\n\n  export function clear() {\n    foods = [];\n  }\n\n  export function foods_init(_foods?: FoodType[]) {\n    (_foods || Foods).forEach(e => food_init(e))\n  }\n\n  export function food_init(food: FoodType) {\n    food = Object.copy(food);\n    if (!food.color) food.color = rndColor();\n    if (!food.repeatability) food.repeatability = 1;\n    foods_type[food.name] = food;\n  }\n\n  export function tick(food: Food) {\n    const type_food: FoodType = foods_type[food.name];\n\n    if (food.timeout > 0) food.timeout--;\n    if (food.timeout == 0) {\n      remove_food_type(food);\n      if (type_food.remove_func) type_food.remove_func();\n      Canvas.drawBox(food.x, food.y, Vars.color_background)\n    }\n\n  }\n\n  export function eat_event() {\n    let pos = Player.pos;\n\n    for (let i = 0; i < foods.length; i++) {\n      let e = foods[i];\n      const type_food: FoodType = foods_type[e.name];\n\n      if (e.x == pos.x && e.y == pos.y) {\n        if (type_food.show_msg) GUI.addMessage(type_food.text)\n        if (!type_food.isNotEat) remove_food_type(e)\n        if (type_food.func) type_food.func(e);\n        if (type_food.isOne) disable_food(e.name);\n        if (type_food.disable_time) {\n          GUI.addTimer(type_food.color, type_food.disable_time, () => type_food.disabled());\n        }\n\n        GUI.legendOpen(type_food.name, type_food.color);\n      }\n\n      tick(e);\n    }\n\n    GUI.reduceTimerAll();\n  }\n\n  export function remove_food(name) {\n    foods = foods.filter(e => e.name !== name);\n    Snake.snake()\n  }\n\n  export function remove_food_type(food: Food) {\n    foods = foods.filter(e => e.x != food.x || e.y != food.y);\n    Snake.snake()\n  }\n\n  export function disable_food(name) {\n    foods_type[name].isDisable = true;\n  }\n\n  export function enable_food(name) {\n    foods_type[name].isDisable = false;\n  }\n\n  export function rndPos(): Pos {\n    let x = Math.random() * Vars.defaultSizeMap >> 0;\n    let y = Math.random() * Vars.defaultSizeMap >> 0;\n\n    if (Player.pos.x == x && Player.pos.y == y) return rndPos();\n    for (let i = 0; i < foods.length; i++) {\n      if (foods[i].x == x && foods[i].y == y) return rndPos();\n    }\n    for (let i = 0; i < Player.tail.length; i++) {\n      if (Player.tail[i].x == x && Player.tail[i].y == y) return rndPos();\n    }\n    return { x, y };\n  }\n\n  export function addFood(name: string, pos: Pos = null) {\n    let food = foods_type[name];\n\n    if (!food || food.isDisable) return console.log('Food not exist/food disable', name);\n    let repeatability = food.repeatability;\n    let timeout = food.timeout || -1;\n    if (food.add_func && !food.add_func()) return;\n    if (!food.add_func && (repeatability != 1 && Math.random() > repeatability)) return;\n    if (food.pseudo && food.pseudo.length) {\n      let item = food.pseudo[Math.random() * food.pseudo.length >> 0];\n      food.color = foods_type[item].color;\n      console.log('set color', food.color)\n    }\n    if(food.rndColor){\n      let i = Math.random() * Vars.colors_food.length >> 0;\n      food.color = Vars.colors_food.slice(i, i+1)[0];\n      console.log('set color', food.color)\n    }\n\n    pos = pos || rndPos();\n    foods.unshift({ x: pos.x, y: pos.y, name, timeout });\n    return true;\n  }\n\n  export function addFoodSmart(arrfoodname: string[]) {\n    if (!_iterationArr.length) {\n      _iterationArr = arrfoodname;\n      iteration++;\n    }\n    _iterationArr\n      .sample(Math.random() * 3 >> 0)\n      .forEach(e => addFood(e));\n  }\n\n  export function addFoodDev(name: string, pos: Pos = null) {\n    pos = pos || rndPos();\n    foods.unshift({ x: pos.x, y: pos.y, name, timeout: -1 });\n    return true;\n  }\n\n  export function rndFoods() {\n    Object.keys(foods_type).forEach(e => addFood(e))\n  }\n\n  export function get_color(name: string) {\n    return foods_type[name].color;\n  }\n\n\n}\n\nexport default SnakeFood;","import SnakeFoods from '../libs/snakeFood';\nimport { Vars, DefaultVars } from '../vars';\nimport Snake from '../libs/snake';\nimport GUI from '../libs/gui'\nimport Player from '../libs/player';\n\nexport default {\n  name: 'eat',\n  text: 'Food',\n  color: Vars.color_food,\n  repeatability: 1,\n  func: () => {\n    Player.inc();\n    Player.addScore();\n    SnakeFoods.addFood('eat');\n    setTimeout(e => SnakeFoods.addFood('feces', Player.pos), 100)\n\n    SnakeFoods.addFoodSmart([\n      'border_off',\n      'speed_reduce',\n      'size_reduce',\n      'speed_add',\n      'size_add',\n      'score_x2',\n      'lessen',\n      'score_1000',\n      'splitfood',\n      'clean',\n      'reset'\n    ])\n  }\n}","import SnakeFoods from '../libs/snakeFood';\nimport { Vars, DefaultVars } from '../vars';\nimport Snake from '../libs/snake';\nimport GUI from '../libs/gui'\nimport Player from '../libs/player';\n\nexport default {\n  name: 'feces',\n  text: 'Feces',\n  isNotEat: true,\n  color: Vars.color_border,\n  repeatability: 0.9,\n  func: () => Snake.end()\n}\n","import SnakeFoods from '../libs/snakeFood';\nimport { Vars, DefaultVars } from '../vars';\nimport Snake from '../libs/snake';\nimport GUI from '../libs/gui'\nimport Player from '../libs/player';\n\nexport default {\n  name: 'clean',\n  text: 'Clean',\n  show_msg: true,\n  repeatability: 1, // 1\n  timeout: 30,\n  func: () => {\n    Player.inc();\n    SnakeFoods.remove_food('feces')\n  }\n}","import SnakeFoods from '../libs/snakeFood';\nimport { Vars, DefaultVars } from '../vars';\nimport Snake from '../libs/snake';\nimport GUI from '../libs/gui'\nimport Player from '../libs/player';\n\nexport default {\n  name: 'border_off',\n  text: 'Border off',\n  show_msg: true,\n  repeatability: 1, // 1\n  timeout: 30,\n  disable_time: 180,\n  disabled: () => {\n    Player.isWall = true;\n    Vars.color_border = DefaultVars.color_border;\n  },\n  func: () => {\n    Player.inc();\n    Player.isWall = false;\n    Vars.color_border = '#C0C5CE';\n  }\n}\n\n","import SnakeFoods from '../libs/snakeFood';\nimport { Vars, DefaultVars } from '../vars';\nimport Snake from '../libs/snake';\nimport GUI from '../libs/gui'\nimport Player from '../libs/player';\n\nexport default {\n  name: 'lessen',\n  text: 'Score /2',\n  show_msg: true,\n  repeatability: 0.8,\n  timeout: 30,\n  color: \"#000\",\n  //rndColor: true,\n  //add_func: () => Player.getScore() > 1000 && SnakeFoods.iteration % 3 == 0,\n  func: () => {\n    Player.addScore(-Player.getScore()/2 >> 0);\n    Player.inc();\n  }\n}","import SnakeFoods from '../libs/snakeFood';\nimport { Vars, DefaultVars } from '../vars';\nimport Snake from '../libs/snake';\nimport GUI from '../libs/gui'\nimport Player from '../libs/player';\n\nexport default {\n  name: 'reset',\n  text: 'Reset',\n  repeatability: 0.5,\n  show_msg: true,\n  timeout: 30,\n  func: () => {\n    Player.inc();\n    SnakeFoods.rndColorReset();\n    SnakeFoods.foods_init();\n    Object.keys(GUI._timers).forEach( e => GUI._timers[e].func())\n    GUI._timers = {};\n    GUI.clearTimer();\n    SnakeFoods.foods = SnakeFoods.foods.filter(e => e.name == \"feces\")\n    SnakeFoods.addFood('eat');\n    setTimeout(e => GUI.legengReset(), 100);\n  }\n}","import SnakeFoods from '../libs/snakeFood';\nimport { Vars, DefaultVars } from '../vars';\nimport Snake from '../libs/snake';\nimport GUI from '../libs/gui'\nimport Player from '../libs/player';\n\nexport default {\n  name: 'score_1000',\n  text: 'Score +1000',\n  show_msg: true,\n  repeatability: 1, // 1/ 1\n  timeout: 30,\n  func: () => {\n    Player.inc();\n    Player.addScore(1000);\n  }\n}","import SnakeFoods from '../libs/snakeFood';\nimport { Vars, DefaultVars } from '../vars';\nimport Snake from '../libs/snake';\nimport GUI from '../libs/gui'\nimport Player from '../libs/player';\n\nexport default {\n  name: 'score_x2',\n  text: 'Score x2',\n  repeatability: 0.8, // 1\n  show_msg: true,\n  timeout: 30,\n  color: \"#000\",\n  //rndColor: true,\n  //add_func: () => Player.getScore() > 1000 && SnakeFoods.iteration % 3 == 0,\n  func: () => {\n    Player.inc();\n    Player.addScore(Player.getScore());\n  }\n}","import SnakeFoods from '../libs/snakeFood';\nimport { Vars, DefaultVars } from '../vars';\nimport Snake from '../libs/snake';\nimport GUI from '../libs/gui'\nimport Player from '../libs/player';\n\nexport default {\n  name: 'size_add',\n  text: 'Add size',\n  show_msg: true,\n  repeatability: 1, // 1\n  timeout: 30,\n  func: () => {\n    Player.size += 5;\n  }\n}","import Player from '../libs/player';\n\nexport default {\n  name: 'size_reduce',\n  text: 'Reduce size',\n  show_msg: true,\n  repeatability: 1, // 1\n  timeout: 30,\n  func: () => {\n    Player.size -= 5;\n    if (Player.size < 4) Player.size = 4;\n  }\n}","import Player from '../libs/player';\n\nexport default {\n  name: 'speed_add',\n  text: 'Add speed',\n  show_msg: true,\n  repeatability: 1, // 1\n  timeout: 30,\n  func: () => {\n    Player.speed += 10;\n  }\n}","import Player from '../libs/player';\n\nexport default {\n  name: 'speed_reduce',\n  text: 'Reduce speed',\n  show_msg: true,\n  repeatability: 1, // 1\n  timeout: 30,\n  func: () => {\n    Player.speed -= 10;\n    if (Player.speed < 0) Player.speed = 0;\n  }\n}","import SnakeFoods from '../libs/snakeFood';\nimport { Vars, DefaultVars } from '../vars';\nimport Snake from '../libs/snake';\nimport GUI from '../libs/gui'\nimport Player from '../libs/player';\n\nexport default {\n  name: 'splitfood',\n  text: 'Split food',\n  show_msg: true,\n  repeatability: 1, // 1\n  timeout: 30,\n  func: () => {\n    Player.inc();\n    SnakeFoods.addFood('eat');\n  }\n}","import Food from './food';\nimport Feces from './feces';\nimport Clean from './clean';\nimport BorderOff from './border_off';\nimport Lessen from './lessen';\nimport Reset from './reset';\nimport Score1000 from './score_1000';\nimport Score_x2 from './score_x2';\nimport Score_x3 from './score_x3';\nimport SizeAdd from './size_add';\nimport SizeReduce from './size_reduce';\nimport SpeedAdd from './speed_add';\nimport SpeedReduce from './speed_reduce';\nimport SplitFood from './splitfood';\n\nconst foods: FoodType[] = [\n  Food, Feces, Lessen, Score_x2, Score1000, Reset, Clean, BorderOff, \n  SizeAdd, SizeReduce, SpeedAdd, SpeedReduce, SplitFood\n]\n\nexport default foods;","import { $, $$ } from \"../helpers/helpers\";\nimport Keyboard from './keyboard';\nimport Player from './player';\nimport Snake from './snake';\nimport SnakeFoods from '../foods/index';\nimport SnakeFood from './snakeFood';\n\n\nnamespace GUI {\n  export let timers: Element = $('#timers');\n  export let _timers = {};\n  export let ingame = 0;\n\n  export function init(){\n    _timers = {};\n  }\n\n  setInterval(e => {\n    if (!Snake.isPause && Snake.isStart) ingame++\n  }, 1000);\n\n  export function addTimer(color: string, duration: number, func: Function) {\n    if (_timers[color]) {\n      _timers[color].element.remove()\n    }\n\n    let element = document.createElement('div');\n    element.setAttribute('class', 'timer');\n    element.style.background = color;\n    element.style.width = '100%';\n\n    timers.append(element);\n\n    _timers[color] = { element, duration, func, keep: duration }\n  }\n  export function reduceTimer(color){\n    let t = _timers[color];\n    \n    let percent = ( --t.keep / t.duration * 100 ) >> 0;  \n    t.element.style.width = (percent).toString() + '%';\n\n    if(t.keep <= 0) {\n      t.element.remove();\n      t.func();\n      delete _timers[color];\n    }\n  }\n\n  export function reduceTimerAll(){\n    Object.keys(_timers).forEach(e => reduceTimer(e));\n  }\n\n  export function clearTimer() {\n    timers.innerHTML = '';\n  }\n\n  export function legendInit() {\n    $('.legends').innerHTML = '';\n\n\n\n    SnakeFoods.forEach(food => {\n      let div = document.createElement('div');\n      let eat = document.createElement('div');\n      let span = document.createElement('span');\n      eat.classList.add('eat');\n\n      if (food.pseudo) {\n        eat.classList.add('pseudo')\n      } else {\n        if (food.color) {\n          eat.style.background = food.color\n        } else {\n          eat.classList.value = \"eat notopens notopen\";\n          eat.setAttribute('data-name', food.name);\n        }\n      }\n\n      span.innerText = food.text;\n\n      div.append(eat);\n      div.append(span);\n\n      $('.legends').append(div);\n\n    })\n  }\n\n  export function legendOpen(name, color) {\n    let el: HTMLElement = $('.notopen.notopens[data-name=\"' + name + '\"]');\n    if (!el) return;\n\n    if(SnakeFood.foods_type[name].rndColor) return;\n    el.classList.remove('notopen');\n    el.style.background = color;\n  }\n\n  export function legengReset() {\n    $$('.notopens').forEach(e => {\n      e.classList.add('notopen');\n      e.style.background = 'transparent';\n    })\n  }\n\n  export function window_open(name) {\n    $('#windows').setAttribute('data-show', name);\n  }\n\n  export function updateScore() {\n    $$('.score span').forEach(e => e.innerHTML = Player.getScore());\n  }\n\n  export function updateTime() {\n    let m = (ingame / 60) % 60 >> 0;\n    let h = ingame / 60 / 60 >> 0;\n    let s = ingame % 60;\n    let info = (h ? h + 'h' : '') + (m ? m + 'm' : '') + s + 's';\n    $$('.ingame span').forEach(e => e.innerHTML = info)\n  }\n\n  export function bestShow() {\n    $$('.best span').forEach(e => e.innerHTML = (+localStorage.getItem(\"best\") || 0));\n  }\n\n  export function updateBest() {\n    if ((+localStorage.getItem(\"best\") || 0) < Player.getScore()) {\n      localStorage.setItem(\"best\", Player.getScore().toString());\n      $$('.best span').forEach(e => e.innerHTML = Player.getScore())\n    }\n  }\n\n  export function resetBest() {\n    localStorage.setItem('best', '0');\n    $$('.best span').forEach(e => e.innerHTML = '0')\n  }\n\n  export function swipeToggle(setState = undefined) {\n    let isset = typeof setState == 'undefined';\n    if (isset) {\n      setState = $('#mobile').getAttribute('data-type') == 'swipe';\n    }\n\n    Keyboard.setSwipe(!setState);\n    if (isset) localStorage.setItem('swipemode', (+setState).toString())\n    $('#mobile').setAttribute('data-type', setState ? 'buttons' : 'swipe');\n  }\n\n\n  export function addMessage(text: string) {\n    let element = document.createElement('div');\n    element.classList.add('message');\n    element.classList.add('show');\n    element.innerText = text;\n\n    $('.messages').append(element)\n    setTimeout(e => element.remove(), 2000)\n  }\n\n}\n\n\nexport default GUI;","import { Vars } from '../vars';\nimport Canvas from './canvas';\nimport GUI from './gui';\nimport { Direction }   from '../helpers/enum'\n\n\nnamespace Player {\n\n  export let size = 4;\n  export let pos: Pos = { x: 1, y: 3 };\n  export let tail: Pos[] = [];\n  export let speed: number = 0;\n  export let direction: Direction = Direction.Down;\n  export let isWall: boolean = true;\n  export let score: number = 0;\n  export let color_snake: string = Vars.color_snake;\n  export let color_snake_head: string = Vars.color_snake_head;\n\n\n  export function set_default() {\n    size = 3;\n    pos = { x: 1, y: 3 };\n    tail = [];\n    speed = 0;\n    direction = Direction.Down;\n    isWall = true;\n    score = 0;\n  }\n\n  export function inc() {\n    speed++;\n    size++;\n  }\n\n  export function setDirection(new_direction: Direction) {\n    direction = new_direction;\n  }\n\n  export function setPos(new_pos: Pos) {\n    pos = new_pos;\n  }\n\n  export function draw() {\n    for (let i = 0; i < tail.length; i++) {\n      let e = tail[i];\n      Canvas.drawBox(e.x, e.y, Vars.color_snake)\n    }\n    if (tail.length > size) {\n      let { x, y } = tail.pop();\n      Canvas.drawBox(x, y, Vars.color_background)\n    }\n    Canvas.drawBox(pos.x, pos.y, Vars.color_snake_head);\n  }\n\n  export function collision() {\n    let is_success = true;\n    for (let i = 0; i < tail.length; i++) {\n      let e = tail[i];\n      if (i && i != tail.length - 1 && e.x == pos.x && e.y == pos.y)\n        is_success = false;\n    }\n\n    if (isWall) {\n      if (\n        pos.y < 0 ||\n        pos.x < 0 ||\n        pos.y > Vars.defaultSizeMap - 1 ||\n        pos.x > Vars.defaultSizeMap - 1\n      ) is_success = false;\n    }\n\n    return is_success;\n  }\n\n  export function getScore() {\n    return score;\n  }\n\n  export function addScore(set_score = 0) {\n    if (!set_score) set_score = (size + speed) / 2 >> 0;\n    score += set_score;\n    GUI.updateScore();\n  }\n\n}\n\nexport default Player;","import { $, $$ } from '../helpers/helpers';\n\nimport Keyboard from './keyboard';\nimport Player from './player'\nimport { Vars } from '../vars';\n\nimport Canvas from './canvas';\nimport GUI from './gui';\nimport SnakeFoods from './snakeFood';\n\nimport { Direction, Keys } from '../helpers/enum'\n\nnamespace Snake {\n\n  export let isStart = false;\n  export let isPause = false;\n  export let isLockKeyboard = false;\n\n  export let onStart: Function = null;\n  export let onEnd: Function = null;\n  export let onEat: Function = null;\n  export let onPause: Function = null;\n  export let _timer = null;\n  export let _lastKeysPress = [];\n\n  export function testDirection(e) {\n    if ((Keys.Up == e && Player.direction == Direction.Down) ||\n      (Keys.Down == e && Player.direction == Direction.Up) ||\n      (Keys.Left == e && Player.direction == Direction.Right) ||\n      (Keys.Right == e && Player.direction == Direction.Left) ||\n      (Keys.Up == e && Player.direction == Direction.Up) ||\n      (Keys.Down == e && Player.direction == Direction.Down) ||\n      (Keys.Left == e && Player.direction == Direction.Right) ||\n      (Keys.Right == e && Player.direction == Direction.Left)\n    )\n      return true\n  }\n\n  export function keyboardEvent(e) {\n    if (Keys.Return == e) start()\n    if (Keys.Space == e) pause()\n\n    if (Keys.Up != e &&\n      Keys.Down != e &&\n      Keys.Left != e &&\n      Keys.Right != e) return;\n\n    if (!isStart || isPause) return;\n    let last = _lastKeysPress[_lastKeysPress.length - 1] || Player.direction;\n    if (last == e ||\n      (Keys.Up == e && last == Direction.Down) ||\n      (Keys.Down == e && last == Direction.Up) ||\n      (Keys.Left == e && last == Direction.Right) ||\n      (Keys.Right == e && last == Direction.Left) ||\n      (Keys.Up == e && last == Direction.Up) ||\n      (Keys.Down == e && last == Direction.Down) ||\n      (Keys.Left == e && last == Direction.Left) ||\n      (Keys.Right == e && last == Direction.Right)\n    ) return;\n\n    if (_lastKeysPress.length < 3) _lastKeysPress.push(e);\n  }\n\n  export function init(canvas_selector: string) {\n    Canvas.init(canvas_selector);\n    GUI.bestShow();\n    GUI.legendInit();\n    Keyboard.init_keyboard($('body'), e => keyboardEvent(e))\n    Keyboard.init_doubletap($('canvas'), e => keyboardEvent(e))\n  }\n\n  export function changeDirection(e) {\n    if (testDirection(e)) return;\n    Player.direction = Direction[Keys[e]]\n  }\n\n\n\n  export function run() {\n    clearTimeout(_timer);\n    _timer = setTimeout(() => {\n      let e = _lastKeysPress.shift();\n      if (e) {\n        changeDirection(e);\n      }\n      if (isStart) {\n        move();\n        run();\n      }\n    }, 300 - Player.speed * 2)\n  }\n\n  export function pause() {\n    if (!isStart) return;\n    GUI.window_open('hide')\n    if (isPause)\n      run();\n    else\n      clearTimeout(_timer);\n\n    isPause = !isPause;\n\n    if (!isStart) return;\n    if (isPause) GUI.window_open('pause');\n    else GUI.window_open('hide');\n  }\n\n  export function snake() {\n    Canvas.first()\n    Player.draw();\n    SnakeFoods.draw();\n  }\n\n  export function end() {\n    isStart = false;\n    if(onEnd) onEnd();\n    GUI.updateTime();\n    GUI.window_open('endgame');\n    GUI.clearTimer();\n    GUI.updateBest();\n  }\n\n  export function start() {\n    if (onPause && isPause) {\n      isPause = false;\n      onPause(false);\n    }\n\n    Vars.set_default();\n    Player.set_default();\n    GUI.init();\n    SnakeFoods.init();\n    Canvas.first();\n\n    isStart = true;\n    SnakeFoods.clear();\n    SnakeFoods.addFood('eat');\n\n    run();\n    GUI.window_open('hide')\n\n    GUI.updateScore();\n    GUI.legengReset();\n    GUI.clearTimer();\n  }\n\n  export function move() {\n\n    Player.tail.unshift({ x: Player.pos.x, y: Player.pos.y })\n    switch (Player.direction) {\n      case Direction.Up: Player.pos.y--; break;\n      case Direction.Right: Player.pos.x--; break;\n      case Direction.Down: Player.pos.y++; break;\n      case Direction.Left: Player.pos.x++; break;\n    }\n    if (!Player.isWall) {\n      if (Player.pos.y < 0) Player.pos.y = Vars.defaultSizeMap - 1;\n      if (Player.pos.x < 0) Player.pos.x = Vars.defaultSizeMap - 1;\n      if (Player.pos.y > Vars.defaultSizeMap - 1) Player.pos.y = 0;\n      if (Player.pos.x > Vars.defaultSizeMap - 1) Player.pos.x = 0;\n    }\n\n    if (!isStart || !Player.collision()) return end();\n    SnakeFoods.eat_event();\n    if (!isStart) Player.pos = Player.tail.shift();\n    snake();\n  }\n\n}\n\nexport default Snake;","import Snake from './libs/snake';\nimport Foods from './libs/snakeFood';\nimport GUI from './libs/gui';\nimport Keyboard from './libs/keyboard';\nimport Player from './libs/player';\nimport { Keys } from './helpers/enum';\nimport { $ } from './helpers/helpers';\n\nsetTimeout(e => {\n  let rev = $('script').src.split('app.')[1].slice(0, -3);\n  $('#rev').innerText = rev;\n}, 1000)\n\nwindow.Game = {\n  start() {\n    GUI.window_open('hide');\n    Snake.start();\n  },\n  unpause(){ Snake.isPause && Snake.pause() },\n  pauseToggle(){ Snake.pause() },\n  setting(){ GUI.window_open('setting'); },\n  main(){ GUI.window_open('start'); },\n  swipeToggle(){ GUI.swipeToggle(); },\n  button_up(){ Snake.keyboardEvent(Keys.Up) },\n  button_left(){ Snake.keyboardEvent(Keys.Right) },\n  button_down(){ Snake.keyboardEvent(Keys.Down) },\n  button_right(){ Snake.keyboardEvent(Keys.Left) },\n  clearScore(){ GUI.resetBest(); }\n};\n\nGUI.swipeToggle(+localStorage.getItem('swipemode') || 0)\nSnake.init('#snake');\n\n","import Snake from './game/libs/snake'\nimport Player from './game/libs/player'\n\nvar baseurl = 'https://snake.lexserest.pw/set/';\nvar url = window.location.href;\nvar token = '';\n\nif(url.split('?').length > 1){\n  token = window.location.href.split('?')[1].split('=')[1];\n}\n\nfunction send(url){\n  var get_script = document.createElement('script');\n  get_script.setAttribute('src', url);\n  document.head.appendChild(get_script);\n  get_script.onload = function(){\n    get_script.remove();\n  }\n}\n\nif(token){\n  //$('footer').style.display = 'none';\n\n  try {\n    history.replaceState({}, 'main', window.location.pathname);\n  } catch (e) {}\n\n  Snake.onEnd = function(){\n    var score = Player.score;\n    var t = score.toString(16) + 'j' + token;\n    if(score) send(baseurl + t)\n  }\n}\n","import './static/style.scss';\nimport './game/main';\n\n\ntry {\n  require('./tg-integration')\n} catch {}"]}